import java.lang.Thread.State;

public class dp_1 {
    /*public static int climbing_staira(int n){                                //recursion
        if(n<=1){
            return 1;
        }
        return climbing_staira(n-1)+climbing_staira(n-2);
    }*/
    
    /*static int arr[];
    public static int climbing_staira(int n){  
        if(arr == null){                                                       //dp-memorization
           arr=new int[n+1];
        }

        if(n<=1){
            return 1;
        }
        if(arr[n] != 0){
            return arr[n];
        }
        return climbing_staira(n-1)+climbing_staira(n-2);
    }*/

    public static int climbing_staira(int n){             
    
        int dp[]=new int[n+1];                                             
        if(n<=1){                                                         //dp-tabulation
            return 1;
        }
        dp[0]=1;
        dp[1]=1;
        for(int i=2;i<=n;i++){
             dp[i]=dp[i-1]+dp[i-2];
        }
        return dp[n];
    }

    public static void main(String[] args) {
        int n=4;
        int result=climbing_staira(n);
        System.out.println(result);
    }
}



/*Recursion (no memo)	O(2^n)	O(n) (call stack)	Exponential calls; recursion depth up to n
Memoization (top-down DP)	O(n)	O(n) (memo array + call stack)	Each state computed once; recursion stack depth n
Iterative DP (bottom-up)	O(n)	O(n) (dp array)	Loop from 2 to n; array stores results*/
