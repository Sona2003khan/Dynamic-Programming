import java.util.Arrays;

public class dp_2 {
    /*static int minCost(int[] height) {                               //recursion
        return helper(height.length - 1, height);
    }
    
    static int helper(int n, int[] height) {
        if (n == 0) return 0;
        
        int left = helper(n - 1, height) + Math.abs(height[n] - height[n - 1]);
        
        int right = Integer.MAX_VALUE;
        if (n > 1) {
            right = helper(n - 2, height) + Math.abs(height[n] - height[n - 2]);
        }
        
        return Math.min(left, right);
    }*/

    /*static int minCost(int[] height) {
        int n = height.length;
        int[] dp = new int[n];
        Arrays.fill(dp, -1);
        return helper(n - 1, height, dp);
    }
        
    static int helper(int n, int[] height, int[] dp) {                           //memorization
        if (n == 0) return 0; 
        if (dp[n] != -1) return dp[n];
        
        int left = helper(n - 1, height, dp) + Math.abs(height[n] - height[n - 1]);
        
        int right = Integer.MAX_VALUE;
        if (n > 1) {
            right = helper(n - 2, height, dp) + Math.abs(height[n] - height[n - 2]);
        }
        
        dp[n] = Math.min(left, right);
        return dp[n];
    }*/

    static int minCost(int[] height) {
        int n = height.length;
        int[] dp = new int[n];
        
        dp[0] = 0;  // starting stone
        
        for (int i = 1; i < n; i++) {
            int left = dp[i - 1] + Math.abs(height[i] - height[i - 1]);
            int right = Integer.MAX_VALUE;
            if (i > 1) {
                right = dp[i - 2] + Math.abs(height[i] - height[i - 2]);
            }
            dp[i] = Math.min(left, right);
        }
        
        return dp[n - 1];
    }

    public static void main(String[] args) {
        int arr[]={20, 30, 40, 20};
        int result=minCost(arr);
        System.out.println(result);
    }

}

/*Time Complexity: O(2^n) for recursion; optimized to O(n) with memoization or DP.
Space Complexity: O(n) for recursion/memoization; reduced to O(1) with space-optimized DP.*/


/*                           frog(3) = 20
                          /         \
                 frog(2)=20      frog(1)=10
                   /     \             \
        frog(1)=10     frog(0)=0     frog(0)=0
             |              |              |
           base=0        base=0         base=0
*/


