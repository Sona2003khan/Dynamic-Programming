import java.util.Arrays;

public class dp_22 {

    /*public static int min_coin(int coins[] ,int amount){
        Integer[] memo = new Integer[amount + 1];
        return helper(coins, amount, memo);
    }

    public static int helper(int[] coins, int rem, Integer[] memo) {
    if (rem < 0) return -1;
    if (rem == 0) return 0;
    if (memo[rem] != null) return memo[rem];

    int min = Integer.MAX_VALUE;
    for (int coin : coins) {
        int res = helper(coins, rem - coin, memo);
        if (res >= 0 && res < min) {
            min = res + 1;
        }
    }

    memo[rem] = (min == Integer.MAX_VALUE) ? -1 : min;
    return memo[rem];
}

    public static void main(String[] args) {
        int coins[]={1,2,5};
        int amount=11;

        int res=min_coin(coins, amount);
        System.out.println(res);
    }*/

    
    public static int min_coin(int[] coins, int amount) {

        int dp[]=new int[amount+1];
        Arrays.fill(dp ,amount+1);
        dp[0]=0;

        for(int i=0;i<=amount;i++){
            for(int coin : coins){
                if(i-coin >= 0){
                    dp[i]=Math.min(dp[i] ,dp[i-coin]+1);
                }
            }
        }

        return dp[amount] > amount ? -1 : dp[amount];
    }

    public static void main(String[] args) {
        int coins[]={1,2,5};
        int amount=11;

        int res=min_coin(coins, amount);
        System.out.println(res);
    }
}

/*helper(4)
                   /      |       \
          1 + helper(3)  1 + helper(2)  (coin=5 invalid)
               /   |   \
       1 + helper(2) 1 + helper(1) (coin=5 invalid)
          /    |     \
1 + helper(1) 1 + helper(0) (coin=5 invalid)
   /   |      |
1 + helper(0) invalid invalid
   | 
   0 (base)*/


/*Time Complexity: O(amount * n)
Space Complexity: O(amount)
Where n is the number of coin denominations.*/
