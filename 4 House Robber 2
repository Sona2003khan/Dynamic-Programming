import java.util.Arrays;

public class dp_4 {
 
    /*public static int House_Robber_2(int nums[] ,int n){           //reursion
        if(n==1){
            return nums[0];
        }
        if(n<0){
            return 0;
        }

        int left=nums[n]+House_Robber_2(nums,n-2);
        int right=House_Robber_2(nums ,n-1);
        return Math.max(left, right);
    }

    public static int helper(int nums[],int n){

        int first[]=new int[n-1];
        int last[]=new int[n-1];
        for(int i=0;i<n-1;i++){
            first[i]=nums[i];
            last[i]=nums[i+1];
        }
        int skipfirst=House_Robber_2(first ,n-2);
        int skiplast=House_Robber_2(last ,n-2);

        return Math.max(skipfirst, skiplast);
    }*/


    /*public static int House_Robber_2(int nums[] ,int n ,int dp[]){          //memorization
        if(n==1){
            return nums[0];
        }
        if(n<0){
            return 0;
        }

        if(dp[n] != -1){
            return dp[n];
        }
        int left=nums[n]+House_Robber_2(nums,n-2,dp) ;
        int right=House_Robber_2(nums ,n-1 ,dp);
        dp[n]= Math.max(left, right);
        return dp[n];
    }

    public static int helper(int nums[],int n){         

        int first[]=new int[n-1];
        int last[]=new int[n-1];
        for(int i=0;i<n-1;i++){
            first[i]=nums[i];
            last[i]=nums[i+1];
        }
        

        int[] dp1 = new int[n - 1];
        int[] dp2 = new int[n - 1];
        Arrays.fill(dp1, -1);
        Arrays.fill(dp2, -1);

        int skipfirst=House_Robber_2(first ,n-2 ,dp1);
        int skiplast=House_Robber_2(last ,n-2 ,dp2);

        return Math.max(skipfirst, skiplast);
    }*/

     public static int robLinear(int[] nums) {                   //tabulation
        int n = nums.length;
        if (n == 0) return 0;
        if (n == 1) return nums[0];

        int[] dp = new int[n];
        dp[0] = nums[0];
        dp[1] = Math.max(nums[0], nums[1]);

        for (int i = 2; i < n; i++) {
            dp[i] = Math.max(nums[i] + dp[i - 2], dp[i - 1]);
        }

        return dp[n - 1];
    }

    // Helper to solve the circular version
    public static int helper(int[] nums) {
        int n = nums.length;
        if (n == 1) return nums[0];

        // Exclude the last house
        int[] first = new int[n - 1];
        for (int i = 0; i < n - 1; i++) {
            first[i] = nums[i];
        }

        // Exclude the first house
        int[] last = new int[n - 1];
        for (int i = 0; i < n - 1; i++) {
            last[i] = nums[i + 1];
        }

        return Math.max(robLinear(first), robLinear(last));
    }


    public static void main(String[] args) {
        int nums[]={1,2,3,1};
        int n=nums.length;

        int result=helper(nums);
        System.out.println(result);
    }
    
}


/*Time Complexity: O(n) — for each of the two linear DP passes (excluding first or last house).
Space Complexity: O(n) — due to the DP arrays used in tabulation.*/

/*                        rob(2)
                    /             \
           2 + rob(0)            rob(1)
             |                      /     \
             2 + 2                3 + rob(-1), rob(0)
               |                      |          |
               4                    3 + 0       2
                                     |           
                                     3
                        rob(2) = max(4, 3) = 4

*/
